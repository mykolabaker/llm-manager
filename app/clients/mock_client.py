import asyncio
import random
from typing import Dict, Any
from .base import BaseLLMClient


class MockLLMClient(BaseLLMClient):
    """Mock LLM client for testing and development"""

    def __init__(self, name: str = "mock"):
        super().__init__(name)
        self.responses = [
            "This is a mock response from the LLM. In a real implementation, this would be generated by an AI model.",
            "Mock LLM here! I'm simulating what a real language model would return for your prompt.",
            "Greetings from the mock client! This response demonstrates the client manager pattern in action.",
            "Mock response: Your prompt has been processed successfully by the mock LLM client.",
            "Hello! This is a simulated response from a language learning model for testing purposes."
        ]

    async def generate(self, prompt: str, **kwargs) -> Dict[str, Any]:
        """
        Generate a mock response with simulated API delay

        Args:
            prompt: The input text prompt
            **kwargs: Additional parameters (ignored in mock)

        Returns:
            Dict containing the mock generated response
        """
        # Simulate API delay
        await asyncio.sleep(random.uniform(0.1, 0.5))

        # Simulate different responses based on prompt length
        if len(prompt) < 10:
            response = "Short prompt detected. Here's a brief mock response."
        elif len(prompt) > 100:
            response = "Long prompt received. This is an extended mock response that simulates how a real LLM would handle longer inputs with more detailed output."
        else:
            response = random.choice(self.responses)

        # Add some prompt-specific context
        if "hello" in prompt.lower():
            response = f"Hello there! {response}"
        elif "question" in prompt.lower():
            response = f"That's a great question! {response}"

        return {
            "response": response,
            "client": self.name,
            "prompt_length": len(prompt),
            "simulated": True
        }

    def get_client_info(self) -> Dict[str, str]:
        """Get information about the mock client"""
        return {
            "name": self.name,
            "type": "mock",
            "description": "Mock LLM client for testing and development",
            "version": "1.0.0",
            "status": "active"
        }